-- Jeddore_ISDP_DB_Script - January 2024
-- The purpose of this script is to update the default base DB as needed or for ease of work.
-- version 1.0
-- Created: January 10, 2024
-- Nicholas Jeddore

use bullseyedb2024;

-- drop any table(s) and trigger(s) here at the start of script
drop table if exists passwordsalt;
drop trigger if exists afterTxnUpdate;
drop trigger if exists afterTxnInsert;

-- Insert data for table `inventory`
-- need records in inventory for new site 11, which is the warehouse bay
INSERT INTO `inventory` (`itemID`, `siteID`, `quantity`, `itemLocation`, `reorderThreshold`, `optimumThreshold`) VALUES (10000,11,0,'0',5,10),(10001,11,0,'0',5,10),(10002,11,0,'0',5,10),(10003,11,0,'0',5,10),(10004,11,0,'0',5,10),(10005,11,0,'0',5,10),(10006,11,0,'0',5,10),(10007,11,0,'0',5,10),(10008,11,0,'0',5,10),(10009,11,0,'0',5,10),(10010,11,0,'0',5,10),(10011,11,0,'0',5,10),(10012,11,0,'0',5,10),(10013,11,0,'0',5,10),(10014,11,0,'0',5,10),(10015,11,0,'0',5,10),(10016,11,0,'0',5,10),(10017,11,0,'0',5,10),(10018,11,0,'0',5,10),(10019,11,0,'0',5,10),(10020,11,0,'0',5,10),(10021,11,0,'0',5,10),(10022,11,0,'0',5,10),(10023,11,0,'0',5,10),(10024,11,0,'0',5,10),(10025,11,0,'0',5,10),(10026,11,0,'0',5,10),(10027,11,0,'0',5,10),(10028,11,0,'0',5,10),(10029,11,0,'0',5,10),(10030,11,0,'0',5,10),(10031,11,0,'0',5,10),(10032,11,0,'0',5,10),(10033,11,0,'0',5,10),(10034,11,0,'0',5,10),(10035,11,0,'0',5,10),(10036,11,0,'0',5,10),(10037,11,0,'0',5,10),(10038,11,0,'0',5,10),(10039,11,0,'0',5,10),(10040,11,0,'0',5,10),(10041,11,0,'0',5,10),(10042,11,0,'0',5,10),(10043,11,0,'0',5,10),(10044,11,0,'0',5,10),(10045,11,0,'0',5,10),(10046,11,0,'0',5,10),(10047,11,0,'0',5,10),(10048,11,0,'0',5,10),(10049,11,0,'0',5,10),(10050,11,0,'0',5,10),(10051,11,0,'0',5,10),(10052,11,0,'0',5,10),(10053,11,0,'0',5,10),(10054,11,0,'0',5,10),(10055,11,0,'0',5,10),(10056,11,0,'0',5,10),(10057,11,0,'0',5,10),(10058,11,0,'0',5,10),(10059,11,0,'0',5,10),(10060,11,0,'0',5,10),(10061,11,0,'0',5,10),(10062,11,0,'0',5,10),(10063,11,0,'0',5,10),(10064,11,0,'0',5,10),(10065,11,0,'0',5,10),(10066,11,0,'0',5,10),(10067,11,0,'0',5,10),(10068,11,0,'0',5,10),(10069,11,0,'0',5,10),(10070,11,0,'0',5,10),(10071,11,0,'0',5,10),(10072,11,0,'0',5,10),(10073,11,0,'0',5,10),(10074,11,0,'0',5,10),(10075,11,0,'0',5,10),(10076,11,0,'0',5,10),(10077,11,0,'0',5,10),(10078,11,0,'0',5,10),(10079,11,0,'0',5,10),(10080,11,0,'0',5,10),(10081,11,0,'0',5,10),(10082,11,0,'0',5,10),(10083,11,0,'0',5,10),(10084,11,0,'0',5,10),(10085,11,0,'0',5,10),(10086,11,0,'0',5,10),(10087,11,0,'0',5,10),(10088,11,0,'0',5,10),(10089,11,0,'0',5,10),(10090,11,0,'0',5,10),(10091,11,0,'0',5,10),(10092,11,0,'0',5,10),(10093,11,0,'0',5,10),(10094,11,0,'0',5,10),(10095,11,0,'0',5,10),(10096,11,0,'0',5,10),(10097,11,0,'0',5,10),(10098,11,0,'0',5,10),(10099,11,0,'0',5,10),(10100,11,0,'0',5,10),(10101,11,0,'0',5,10),(10102,11,0,'0',5,10),(10103,11,0,'0',5,10),(10104,11,0,'0',5,10),(10105,11,0,'0',5,10),(10106,11,0,'0',5,10),(10107,11,0,'0',5,10),(10108,11,0,'0',5,10),(10109,11,0,'0',5,10),(10110,11,0,'0',5,10),(10111,11,0,'0',5,10),(10112,11,0,'0',5,10),(10113,11,0,'0',5,10),(10114,11,0,'0',5,10),(10115,11,0,'0',5,10),(10116,11,0,'0',5,10),(10117,11,0,'0',5,10),(10118,11,0,'0',5,10),(10119,11,0,'0',5,10),(10120,11,0,'0',5,10),(10121,11,0,'0',5,10),(10122,11,0,'0',5,10),(10123,11,0,'0',5,10),(10124,11,0,'0',5,10),(10125,11,0,'0',5,10),(10126,11,0,'0',5,10),(10127,11,0,'0',5,10),(10128,11,0,'0',5,10),(10129,11,0,'0',5,10),(10130,11,0,'0',5,10),(10131,11,0,'0',5,10),(10132,11,0,'0',5,10),(10133,11,0,'0',5,10),(10134,11,0,'0',5,10),(10135,11,0,'0',5,10),(10136,11,0,'0',5,10),(10137,11,0,'0',5,10),(10138,11,0,'0',5,10),(10139,11,0,'0',5,10),(10140,11,0,'0',5,10),(10141,11,0,'0',5,10),(10142,11,0,'0',5,10),(10143,11,0,'0',5,10),(10144,11,0,'0',5,10),(10145,11,0,'0',5,10),(10146,11,0,'0',5,10),(10147,11,0,'0',5,10),(10148,11,0,'0',5,10),(10149,11,0,'0',5,10),(10150,11,0,'0',5,10),(10151,11,0,'0',5,10),(10152,11,0,'0',5,10),(10153,11,0,'0',5,10),(10154,11,0,'0',5,10),(10155,11,0,'0',5,10),(10156,11,0,'0',5,10),(10157,11,0,'0',5,10),(10158,11,0,'0',5,10),(10159,11,0,'0',5,10),(10160,11,0,'0',5,10),(10161,11,0,'0',5,10),(10162,11,0,'0',5,10),(10163,11,0,'0',5,10),(10164,11,0,'0',5,10),(10165,11,0,'0',5,10),(10166,11,0,'0',5,10),(10167,11,0,'0',5,10),(10168,11,0,'0',5,10),(10169,11,0,'0',5,10),(10170,11,0,'0',5,10),(10171,11,0,'0',5,10),(10172,11,0,'0',5,10),(10173,11,0,'0',5,10),(10174,11,0,'0',5,10),(10175,11,0,'0',5,10),(10176,11,0,'0',5,10),(10177,11,0,'0',5,10),(10178,11,0,'0',5,10),(10179,11,0,'0',5,10),(10180,11,0,'0',5,10),(10181,11,0,'0',5,10),(10182,11,0,'0',5,10),(10183,11,0,'0',5,10),(10184,11,0,'0',5,10),(10185,11,0,'0',5,10),(10186,11,0,'0',5,10),(10187,11,0,'0',5,10),(10188,11,0,'0',5,10),(10189,11,0,'0',5,10),(10190,11,0,'0',5,10),(10191,11,0,'0',5,10),(10192,11,0,'0',5,10),(10193,11,0,'0',5,10),(10194,11,0,'0',5,10),(10195,11,0,'0',5,10),(10196,11,0,'0',5,10),(10197,11,0,'0',5,10),(10198,11,0,'0',5,10),(10199,11,0,'0',5,10),(10200,11,0,'0',5,10),(10201,11,0,'0',5,10),(10202,11,0,'0',5,10),(10203,11,0,'0',5,10),(10204,11,0,'0',5,10),(10205,11,0,'0',5,10),(10206,11,0,'0',5,10),(10207,11,0,'0',5,10),(10208,11,0,'0',5,10),(10209,11,0,'0',5,10),(10210,11,0,'0',5,10),(10211,11,0,'0',5,10),(10212,11,0,'0',5,10),(10213,11,0,'0',5,10),(10214,11,0,'0',5,10),(10215,11,0,'0',5,10),(10216,11,0,'0',5,10),(10217,11,0,'0',5,10),(10218,11,0,'0',5,10),(10219,11,0,'0',5,10),(10220,11,0,'0',5,10),(10221,11,0,'0',5,10),(10222,11,0,'0',5,10),(10223,11,0,'0',5,10),(10224,11,0,'0',5,10),(10225,11,0,'0',5,10),(10226,11,0,'0',5,10),(10227,11,0,'0',5,10),(10228,11,0,'0',5,10),(10229,11,0,'0',5,10),(10230,11,0,'0',5,10),(10231,11,0,'0',5,10),(10232,11,0,'0',5,10),(10233,11,0,'0',5,10),(10234,11,0,'0',5,10),(10235,11,0,'0',5,10),(10236,11,0,'0',5,10),(10237,11,0,'0',5,10),(10238,11,0,'0',5,10),(10239,11,0,'0',5,10),(10240,11,0,'0',5,10),(10241,11,0,'0',5,10),(10242,11,0,'0',5,10),(10243,11,0,'0',5,10),(10244,11,0,'0',5,10),(10245,11,0,'0',5,10),(10246,11,0,'0',5,10),(10247,11,0,'0',5,10),(10248,11,0,'0',5,10),(10249,11,0,'0',5,10),(10250,11,0,'0',5,10),(10251,11,0,'0',5,10),(10252,11,0,'0',5,10),(10253,11,0,'0',5,10),(10254,11,0,'0',5,10),(10255,11,0,'0',5,10),(10256,11,0,'0',5,10),(10257,11,0,'0',5,10),(10258,11,0,'0',5,10),(10259,11,0,'0',5,10),(10260,11,0,'0',5,10),(10261,11,0,'0',5,10),(10262,11,0,'0',5,10),(10263,11,0,'0',5,10),(10264,11,0,'0',5,10),(10265,11,0,'0',5,10),(10266,11,0,'0',5,10),(10267,11,0,'0',5,10),(10268,11,0,'0',5,10),(10269,11,0,'0',5,10),(10270,11,0,'0',5,10),(10271,11,0,'0',5,10),(10272,11,0,'0',5,10),(10273,11,0,'0',5,10),(10274,11,0,'0',5,10),(10275,11,0,'0',5,10),(10276,11,0,'0',5,10),(10277,11,0,'0',5,10),(10278,11,0,'0',5,10),(10279,11,0,'0',5,10),(10280,11,0,'0',5,10),(10281,11,0,'0',5,10),(10282,11,0,'0',5,10),(10283,11,0,'0',5,10),(10284,11,0,'0',5,10),(10285,11,0,'0',5,10),(10286,11,0,'0',5,10),(10287,11,0,'0',5,10),(10288,11,0,'0',5,10),(10289,11,0,'0',5,10),(10290,11,0,'0',5,10),(10291,11,0,'0',5,10),(10292,11,0,'0',5,10),(10293,11,0,'0',5,10),(10294,11,0,'0',5,10),(10295,11,0,'0',5,10),(10296,11,0,'0',5,10),(10297,11,0,'0',5,10),(10298,11,0,'0',5,10),(10299,11,0,'0',5,10),(10300,11,0,'0',5,10),(10301,11,0,'0',5,10),(10302,11,0,'0',5,10),(10303,11,0,'0',5,10),(10304,11,0,'0',5,10),(10305,11,0,'0',5,10),(10306,11,0,'0',5,10),(10307,11,0,'0',5,10),(10308,11,0,'0',5,10),(10309,11,0,'0',5,10),(10310,11,0,'0',5,10),(10311,11,0,'0',5,10),(10312,11,0,'0',5,10),(10313,11,0,'0',5,10),(10314,11,0,'0',5,10),(10315,11,0,'0',5,10),(10316,11,0,'0',5,10),(10317,11,0,'0',5,10),(10318,11,0,'0',5,10),(10319,11,0,'0',5,10),(10320,11,0,'0',5,10),(10321,11,0,'0',5,10),(10322,11,0,'0',5,10),(10323,11,0,'0',5,10),(10324,11,0,'0',5,10),(10325,11,0,'0',5,10),(10326,11,0,'0',5,10),(10327,11,0,'0',5,10),(10328,11,0,'0',5,10),(10329,11,0,'0',5,10),(10330,11,0,'0',5,10),(10331,11,0,'0',5,10),(10332,11,0,'0',5,10),(10333,11,0,'0',5,10),(10334,11,0,'0',5,10),(10335,11,0,'0',5,10),(10336,11,0,'0',5,10),(10337,11,0,'0',5,10),(10338,11,0,'0',5,10),(10339,11,0,'0',5,10),(10340,11,0,'0',5,10),(10341,11,0,'0',5,10),(10342,11,0,'0',5,10),(10343,11,0,'0',5,10),(10344,11,0,'0',5,10),(10345,11,0,'0',5,10),(10346,11,0,'0',5,10),(10347,11,0,'0',5,10),(10348,11,0,'0',5,10),(10349,11,0,'0',5,10),(10350,11,0,'0',5,10),(10351,11,0,'0',5,10),(10352,11,0,'0',5,10),(10353,11,0,'0',5,10),(10354,11,0,'0',5,10),(10355,11,0,'0',5,10),(10356,11,0,'0',5,10),(10357,11,0,'0',5,10),(10358,11,0,'0',5,10),(10359,11,0,'0',5,10),(10360,11,0,'0',5,10),(10361,11,0,'0',5,10),(10362,11,0,'0',5,10),(10363,11,0,'0',5,10),(10364,11,0,'0',5,10),(10365,11,0,'0',5,10),(10366,11,0,'0',5,10),(10367,11,0,'0',5,10),(10368,11,0,'0',5,10),(10369,11,0,'0',5,10),(10370,11,0,'0',5,10),(10371,11,0,'0',5,10),(10372,11,0,'0',5,10),(10373,11,0,'0',5,10),(10374,11,0,'0',5,10),(10375,11,0,'0',5,10),(10376,11,0,'0',5,10),(10377,11,0,'0',5,10),(10378,11,0,'0',5,10),(10379,11,0,'0',5,10),(10380,11,0,'0',5,10),(10381,11,0,'0',5,10),(10382,11,0,'0',5,10),(10383,11,0,'0',5,10),(10384,11,0,'0',5,10),(10385,11,0,'0',5,10),(10386,11,0,'0',5,10),(10387,11,0,'0',5,10),(10388,11,0,'0',5,10),(10389,11,0,'0',5,10),(10390,11,0,'0',5,10),(10391,11,0,'0',5,10),(10392,11,0,'0',5,10),(10393,11,0,'0',5,10),(10394,11,0,'0',5,10),(10395,11,0,'0',5,10),(10396,11,0,'0',5,10),(10397,11,0,'0',5,10),(10398,11,0,'0',5,10),(10399,11,0,'0',5,10),(10400,11,0,'0',5,10),(10401,11,0,'0',5,10),(10402,11,0,'0',5,10),(10403,11,0,'0',5,10),(10404,11,0,'0',5,10),(10405,11,0,'0',5,10),(10406,11,0,'0',5,10),(10407,11,0,'0',5,10),(10408,11,0,'0',5,10),(10409,11,0,'0',5,10),(10410,11,0,'0',5,10),(10411,11,0,'0',5,10),(10412,11,0,'0',5,10),(10413,11,0,'0',5,10),(10414,11,0,'0',5,10),(10415,11,0,'0',5,10),(10416,11,0,'0',5,10),(10417,11,0,'0',5,10),(10418,11,0,'0',5,10),(10419,11,0,'0',5,10),(10420,11,0,'0',5,10),(10421,11,0,'0',5,10),(10422,11,0,'0',5,10),(10423,11,0,'0',5,10),(10424,11,0,'0',5,10),(10425,11,0,'0',5,10),(10426,11,0,'0',5,10),(10427,11,0,'0',5,10),(10428,11,0,'0',5,10),(10429,11,0,'0',5,10),(10430,11,0,'0',5,10),(10431,11,0,'0',5,10),(10432,11,0,'0',5,10),(10433,11,0,'0',5,10),(10434,11,0,'0',5,10),(10435,11,0,'0',5,10),(10436,11,0,'0',5,10),(10437,11,0,'0',5,10),(10438,11,0,'0',5,10),(10439,11,0,'0',5,10),(10440,11,0,'0',5,10),(10441,11,0,'0',5,10),(10442,11,0,'0',5,10),(10443,11,0,'0',5,10),(10444,11,0,'0',5,10),(10445,11,0,'0',5,10),(10446,11,0,'0',5,10),(10447,11,0,'0',5,10),(10448,11,0,'0',5,10),(10449,11,0,'0',5,10),(10450,11,0,'0',5,10),(10451,11,0,'0',5,10),(10452,11,0,'0',5,10),(10453,11,0,'0',5,10),(10454,11,0,'0',5,10),(10455,11,0,'0',5,10),(10456,11,0,'0',5,10),(10457,11,0,'0',5,10),(10458,11,0,'0',5,10),(10459,11,0,'0',5,10),(10460,11,0,'0',5,10),(10461,11,0,'0',5,10),(10462,11,0,'0',5,10),(10463,11,0,'0',5,10),(10464,11,0,'0',5,10),(10465,11,0,'0',5,10),(10466,11,0,'0',5,10),(10467,11,0,'0',5,10),(10468,11,0,'0',5,10),(10469,11,0,'0',5,10),(10470,11,0,'0',5,10),(10471,11,0,'0',5,10),(10472,11,0,'0',5,10),(10473,11,0,'0',5,10),(10474,11,0,'0',5,10),(10475,11,0,'0',5,10),(10476,11,0,'0',5,10),(10477,11,0,'0',5,10),(10478,11,0,'0',5,10),(10479,11,0,'0',5,10),(10480,11,0,'0',5,10),(10481,11,0,'0',5,10),(10482,11,0,'0',5,10),(10483,11,0,'0',5,10),(10484,11,0,'0',5,10),(10485,11,0,'0',5,10),(10486,11,0,'0',5,10),(10487,11,0,'0',5,10),(10488,11,0,'0',5,10),(10489,11,0,'0',5,10),(10490,11,0,'0',5,10),(10491,11,0,'0',5,10),(10492,11,0,'0',5,10),(10493,11,0,'0',5,10),(10494,11,0,'0',5,10),(10495,11,0,'0',5,10),(10496,11,0,'0',5,10),(10497,11,0,'0',5,10),(10498,11,0,'0',5,10),(10499,11,0,'0',5,10),(10500,11,0,'0',5,10),(10501,11,0,'0',5,10),(10502,11,0,'0',5,10),(10503,11,0,'0',5,10),(10504,11,0,'0',5,10),(10505,11,0,'0',5,10),(10506,11,0,'0',5,10),(10507,11,0,'0',5,10),(10508,11,0,'0',5,10),(10509,11,0,'0',5,10),(10510,11,0,'0',5,10),(10511,11,0,'0',5,10),(10512,11,0,'0',5,10),(10513,11,0,'0',5,10),(10514,11,0,'0',5,10),(10515,11,0,'0',5,10),(10516,11,0,'0',5,10),(10517,11,0,'0',5,10),(10518,11,0,'0',5,10),(10519,11,0,'0',5,10),(10520,11,0,'0',5,10),(10521,11,0,'0',5,10),(10522,11,0,'0',5,10),(10523,11,0,'0',5,10),(10524,11,0,'0',5,10),(10525,11,0,'0',5,10),(10526,11,0,'0',5,10),(10527,11,0,'0',5,10),(10528,11,0,'0',5,10),(10529,11,0,'0',5,10),(10530,11,0,'0',5,10),(10531,11,0,'0',5,10),(10532,11,0,'0',5,10),(10533,11,0,'0',5,10),(10534,11,0,'0',5,10),(10535,11,0,'0',5,10),(10536,11,0,'0',5,10),(10537,11,0,'0',5,10),(10538,11,0,'0',5,10),(10539,11,0,'0',5,10),(10540,11,0,'0',5,10),(10541,11,0,'0',5,10),(10542,11,0,'0',5,10),(10543,11,0,'0',5,10),(10544,11,0,'0',5,10),(10545,11,0,'0',5,10),(10546,11,0,'0',5,10),(10547,11,0,'0',5,10),(10548,11,0,'0',5,10),(10549,11,0,'0',5,10),(10550,11,0,'0',5,10),(10551,11,0,'0',5,10),(10552,11,0,'0',5,10),(10553,11,0,'0',5,10),(10554,11,0,'0',5,10),(10555,11,0,'0',5,10),(10556,11,0,'0',5,10),(10557,11,0,'0',5,10),(10558,11,0,'0',5,10),(10559,11,0,'0',5,10),(10560,11,0,'0',5,10),(10561,11,0,'0',5,10),(10562,11,0,'0',5,10),(10563,11,0,'0',5,10),(10564,11,0,'0',5,10),(10565,11,0,'0',5,10),(10566,11,0,'0',5,10),(10567,11,0,'0',5,10),(10568,11,0,'0',5,10),(10569,11,0,'0',5,10),(10570,11,0,'0',5,10),(10571,11,0,'0',5,10),(10572,11,0,'0',5,10),(10573,11,0,'0',5,10),(10574,11,0,'0',5,10),(10575,11,0,'0',5,10),(10576,11,0,'0',5,10),(10577,11,0,'0',5,10),(10578,11,0,'0',5,10),(10579,11,0,'0',5,10),(10580,11,0,'0',5,10),(10581,11,0,'0',5,10),(10582,11,0,'0',5,10),(10583,11,0,'0',5,10),(10584,11,0,'0',5,10),(10585,11,0,'0',5,10),(10586,11,0,'0',5,10),(10587,11,0,'0',5,10),(10588,11,0,'0',5,10),(10589,11,0,'0',5,10),(10590,11,0,'0',5,10),(10591,11,0,'0',5,10),(10592,11,0,'0',5,10),(10593,11,0,'0',5,10),(10594,11,0,'0',5,10),(10595,11,0,'0',5,10),(10596,11,0,'0',5,10),(10597,11,0,'0',5,10),(10598,11,0,'0',5,10),(10599,11,0,'0',5,10),(10600,11,0,'0',5,10),(10601,11,0,'0',5,10),(10602,11,0,'0',5,10),(10603,11,0,'0',5,10),(10604,11,0,'0',5,10),(10605,11,0,'0',5,10),(10606,11,0,'0',5,10),(10607,11,0,'0',5,10),(10608,11,0,'0',5,10),(10609,11,0,'0',5,10),(10610,11,0,'0',5,10),(10611,11,0,'0',5,10),(10612,11,0,'0',5,10),(10613,11,0,'0',5,10),(10614,11,0,'0',5,10),(10615,11,0,'0',5,10),(10616,11,0,'0',5,10),(10617,11,0,'0',5,10),(10618,11,0,'0',5,10),(10619,11,0,'0',5,10),(10620,11,0,'0',5,10),(10621,11,0,'0',5,10),(10622,11,0,'0',5,10),(10623,11,0,'0',5,10),(10624,11,0,'0',5,10),(10625,11,0,'0',5,10),(10626,11,0,'0',5,10),(10627,11,0,'0',5,10),(10628,11,0,'0',5,10),(10629,11,0,'0',5,10),(10630,11,0,'0',5,10),(10631,11,0,'0',5,10),(10632,11,0,'0',5,10),(10633,11,0,'0',5,10),(10634,11,0,'0',5,10),(10635,11,0,'0',5,10),(10636,11,0,'0',5,10),(10637,11,0,'0',5,10),(10638,11,0,'0',5,10),(10639,11,0,'0',5,10),(10640,11,0,'0',5,10),(10641,11,0,'0',5,10),(10642,11,0,'0',5,10),(10643,11,0,'0',5,10),(10644,11,0,'0',5,10),(10645,11,0,'0',5,10),(10646,11,0,'0',5,10),(10647,11,0,'0',5,10),(10648,11,0,'0',5,10),(10649,11,0,'0',5,10),(10650,11,0,'0',5,10),(10651,11,0,'0',5,10),(10652,11,0,'0',5,10),(10653,11,0,'0',5,10),(10654,11,0,'0',5,10),(10655,11,0,'0',5,10),(10656,11,0,'0',5,10),(10657,11,0,'0',5,10),(10658,11,0,'0',5,10),(10659,11,0,'0',5,10),(10660,11,0,'0',5,10),(10661,11,0,'0',5,10),(10662,11,0,'0',5,10),(10663,11,0,'0',5,10),(10664,11,0,'0',5,10),(10665,11,0,'0',5,10),(10666,11,0,'0',5,10),(10667,11,0,'0',5,10),(10668,11,0,'0',5,10),(10669,11,0,'0',5,10),(10670,11,0,'0',5,10),(10671,11,0,'0',5,10),(10672,11,0,'0',5,10),(10673,11,0,'0',5,10),(10674,11,0,'0',5,10),(10675,11,0,'0',5,10),(10676,11,0,'0',5,10),(10677,11,0,'0',5,10),(10678,11,0,'0',5,10),(10679,11,0,'0',5,10),(10680,11,0,'0',5,10),(10681,11,0,'0',5,10),(10682,11,0,'0',5,10),(10683,11,0,'0',5,10),(10684,11,0,'0',5,10),(10685,11,0,'0',5,10),(10686,11,0,'0',5,10),(10687,11,0,'0',5,10),(10688,11,0,'0',5,10),(10689,11,0,'0',5,10),(10690,11,0,'0',5,10),(10691,11,0,'0',5,10),(10692,11,0,'0',5,10),(10693,11,0,'0',5,10),(10694,11,0,'0',5,10),(10695,11,0,'0',5,10),(10696,11,0,'0',5,10),(10697,11,0,'0',5,10),(10698,11,0,'0',5,10),(10699,11,0,'0',5,10),(10700,11,0,'0',5,10),(10701,11,0,'0',5,10),(10702,11,0,'0',5,10),(10703,11,0,'0',5,10),(10704,11,0,'0',5,10),(10705,11,0,'0',5,10),(10706,11,0,'0',5,10),(10707,11,0,'0',5,10),(10708,11,0,'0',5,10),(10709,11,0,'0',5,10),(10710,11,0,'0',5,10),(10711,11,0,'0',5,10),(10712,11,0,'0',5,10),(10713,11,0,'0',5,10),(10714,11,0,'0',5,10),(10715,11,0,'0',5,10),(10716,11,0,'0',5,10),(10717,11,0,'0',5,10),(10718,11,0,'0',5,10),(10719,11,0,'0',5,10),(10720,11,0,'0',5,10),(10721,11,0,'0',5,10),(10722,11,0,'0',5,10),(10723,11,0,'0',5,10),(10724,11,0,'0',5,10),(10725,11,0,'0',5,10),(10726,11,0,'0',5,10),(10727,11,0,'0',5,10),(10728,11,0,'0',5,10),(10729,11,0,'0',5,10),(10730,11,0,'0',5,10),(10731,11,0,'0',5,10),(10732,11,0,'0',5,10),(10733,11,0,'0',5,10),(10734,11,0,'0',5,10),(10735,11,0,'0',5,10),(10736,11,0,'0',5,10),(10737,11,0,'0',5,10),(10738,11,0,'0',5,10),(10739,11,0,'0',5,10),(10740,11,0,'0',5,10),(10741,11,0,'0',5,10),(10742,11,0,'0',5,10),(10743,11,0,'0',5,10),(10744,11,0,'0',5,10),(10745,11,0,'0',5,10),(10746,11,0,'0',5,10),(10747,11,0,'0',5,10),(10748,11,0,'0',5,10),(10749,11,0,'0',5,10),(10750,11,0,'0',5,10),(10751,11,0,'0',5,10),(10752,11,0,'0',5,10),(10753,11,0,'0',5,10),(10754,11,0,'0',5,10),(10755,11,0,'0',5,10),(10756,11,0,'0',5,10),(10757,11,0,'0',5,10),(10758,11,0,'0',5,10),(10759,11,0,'0',5,10),(10760,11,0,'0',5,10),(10761,11,0,'0',5,10),(10762,11,0,'0',5,10),(10763,11,0,'0',5,10),(10764,11,0,'0',5,10),(10765,11,0,'0',5,10),(10766,11,0,'0',5,10),(10767,11,0,'0',5,10),(10768,11,0,'0',5,10),(10769,11,0,'0',5,10),(10770,11,0,'0',5,10),(10771,11,0,'0',5,10),(10772,11,0,'0',5,10),(10773,11,0,'0',5,10),(10774,11,0,'0',5,10),(10775,11,0,'0',5,10),(10776,11,0,'0',5,10),(10777,11,0,'0',5,10),(10778,11,0,'0',5,10),(10779,11,0,'0',5,10),(10780,11,0,'0',5,10),(10781,11,0,'0',5,10),(10782,11,0,'0',5,10),(10783,11,0,'0',5,10),(10784,11,0,'0',5,10),(10785,11,0,'0',5,10),(10786,11,0,'0',5,10),(10787,11,0,'0',5,10),(10788,11,0,'0',5,10),(10789,11,0,'0',5,10),(10790,11,0,'0',5,10),(10791,11,0,'0',5,10),(10792,11,0,'0',5,10),(10793,11,0,'0',5,10),(10794,11,0,'0',5,10),(10795,11,0,'0',5,10),(10796,11,0,'0',5,10),(10797,11,0,'0',5,10),(10798,11,0,'0',5,10),(10799,11,0,'0',5,10),(10800,11,0,'0',5,10),(10801,11,0,'0',5,10),(10802,11,0,'0',5,10),(10803,11,0,'0',5,10),(10804,11,0,'0',5,10),(10805,11,0,'0',5,10),(10806,11,0,'0',5,10),(10807,11,0,'0',5,10),(10808,11,0,'0',5,10),(10809,11,0,'0',5,10),(10810,11,0,'0',5,10),(10811,11,0,'0',5,10),(10812,11,0,'0',5,10),(10813,11,0,'0',5,10),(10814,11,0,'0',5,10),(10815,11,0,'0',5,10),(10816,11,0,'0',5,10),(10817,11,0,'0',5,10),(10818,11,0,'0',5,10),(10819,11,0,'0',5,10),(10820,11,0,'0',5,10),(10821,11,0,'0',5,10),(10822,11,0,'0',5,10),(10823,11,0,'0',5,10),(10824,11,0,'0',5,10),(10825,11,0,'0',5,10),(10826,11,0,'0',5,10),(10827,11,0,'0',5,10),(10828,11,0,'0',5,10),(10829,11,0,'0',5,10),(10830,11,0,'0',5,10),(10831,11,0,'0',5,10),(10832,11,0,'0',5,10),(10833,11,0,'0',5,10),(10834,11,0,'0',5,10),(10835,11,0,'0',5,10),(10836,11,0,'0',5,10),(10837,11,0,'0',5,10),(10838,11,0,'0',5,10),(10839,11,0,'0',5,10),(10840,11,0,'0',5,10),(10841,11,0,'0',5,10),(10842,11,0,'0',5,10),(10843,11,0,'0',5,10),(10844,11,0,'0',5,10),(10845,11,0,'0',5,10),(10846,11,0,'0',5,10),(10847,11,0,'0',5,10),(10848,11,0,'0',5,10),(10849,11,0,'0',5,10),(10850,11,0,'0',5,10),(10851,11,0,'0',5,10),(10852,11,0,'0',5,10),(10853,11,0,'0',5,10),(10854,11,0,'0',5,10),(10855,11,0,'0',5,10),(10856,11,0,'0',5,10),(10857,11,0,'0',5,10),(10858,11,0,'0',5,10),(10859,11,0,'0',5,10),(10860,11,0,'0',5,10),(10861,11,0,'0',5,10),(10862,11,0,'0',5,10),(10863,11,0,'0',5,10),(10864,11,0,'0',5,10),(10865,11,0,'0',5,10),(10866,11,0,'0',5,10),(10867,11,0,'0',5,10),(10868,11,0,'0',5,10),(10869,11,0,'0',5,10),(10870,11,0,'0',5,10),(10871,11,0,'0',5,10),(10872,11,0,'0',5,10),(10873,11,0,'0',5,10),(10874,11,0,'0',5,10),(10875,11,0,'0',5,10),(10876,11,0,'0',5,10),(10877,11,0,'0',5,10),(10878,11,0,'0',5,10),(10879,11,0,'0',5,10),(10880,11,0,'0',5,10),(10881,11,0,'0',5,10),(10882,11,0,'0',5,10),(10883,11,0,'0',5,10),(10884,11,0,'0',5,10),(10885,11,0,'0',5,10),(10886,11,0,'0',5,10),(10887,11,0,'0',5,10),(10888,11,0,'0',5,10),(10889,11,0,'0',5,10),(10890,11,0,'0',5,10),(10891,11,0,'0',5,10),(10892,11,0,'0',5,10),(10893,11,0,'0',5,10),(10894,11,0,'0',5,10),(10895,11,0,'0',5,10),(10896,11,0,'0',5,10),(10897,11,0,'0',5,10),(10898,11,0,'0',5,10),(10899,11,0,'0',5,10),(10900,11,0,'0',5,10),(10901,11,0,'0',5,10),(10902,11,0,'0',5,10),(10903,11,0,'0',5,10),(10904,11,0,'0',5,10),(10905,11,0,'0',5,10),(10906,11,0,'0',5,10),(10907,11,0,'0',5,10),(10908,11,0,'0',5,10),(10909,11,0,'0',5,10),(10910,11,0,'0',5,10),(10911,11,0,'0',5,10),(10912,11,0,'0',5,10),(10913,11,0,'0',5,10),(10914,11,0,'0',5,10),(10915,11,0,'0',5,10),(10916,11,0,'0',5,10),(10917,11,0,'0',5,10),(10918,11,0,'0',5,10),(10919,11,0,'0',5,10),(10920,11,0,'0',5,10),(10921,11,0,'0',5,10),(10922,11,0,'0',5,10),(10923,11,0,'0',5,10),(10924,11,0,'0',5,10),(10925,11,0,'0',5,10),(10926,11,0,'0',5,10),(10927,11,0,'0',5,10),(10928,11,0,'0',5,10),(10929,11,0,'0',5,10),(10930,11,0,'0',5,10),(10931,11,0,'0',5,10),(10932,11,0,'0',5,10),(10933,11,0,'0',5,10),(10934,11,0,'0',5,10),(10935,11,0,'0',5,10),(10936,11,0,'0',5,10),(10937,11,0,'0',5,10),(10938,11,0,'0',5,10),(10939,11,0,'0',5,10),(10940,11,0,'0',5,10),(10941,11,0,'0',5,10),(10942,11,0,'0',5,10),(10943,11,0,'0',5,10),(10944,11,0,'0',5,10),(10945,11,0,'0',5,10),(10946,11,0,'0',5,10),(10947,11,0,'0',5,10),(10948,11,0,'0',5,10),(10949,11,0,'0',5,10),(10950,11,0,'0',5,10),(10951,11,0,'0',5,10),(10952,11,0,'0',5,10),(10953,11,0,'0',5,10),(10954,11,0,'0',5,10),(10955,11,0,'0',5,10),(10956,11,0,'0',5,10),(10957,11,0,'0',5,10),(10958,11,0,'0',5,10),(10959,11,0,'0',5,10),(10960,11,0,'0',5,10),(10961,11,0,'0',5,10),(10962,11,0,'0',5,10),(10963,11,0,'0',5,10),(10964,11,0,'0',5,10),(10965,11,0,'0',5,10),(10966,11,0,'0',5,10),(10967,11,0,'0',5,10),(10968,11,0,'0',5,10),(10969,11,0,'0',5,10),(10970,11,0,'0',5,10),(10971,11,0,'0',5,10),(10972,11,0,'0',5,10),(10973,11,0,'0',5,10),(10974,11,0,'0',5,10),(10975,11,0,'0',5,10),(10976,11,0,'0',5,10),(10977,11,0,'0',5,10),(10978,11,0,'0',5,10),(10979,11,0,'0',5,10),(10980,11,0,'0',5,10),(10981,11,0,'0',5,10),(10982,11,0,'0',5,10),(10983,11,0,'0',5,10),(10984,11,0,'0',5,10),(10985,11,0,'0',5,10),(10986,11,0,'0',5,10),(10987,11,0,'0',5,10),(10988,11,0,'0',5,10),(10989,11,0,'0',5,10),(10990,11,0,'0',5,10),(10991,11,0,'0',5,10),(10992,11,0,'0',5,10),(10993,11,0,'0',5,10),(10994,11,0,'0',5,10),(10995,11,0,'0',5,10),(10996,11,0,'0',5,10),(10997,11,0,'0',5,10),(10998,11,0,'0',5,10);

-- creating a table for storing password salts for each employee
CREATE TABLE `passwordsalt` (
  `employeeID` int NOT NULL PRIMARY KEY,
  `passwordSalt` varchar(64) NOT NULL,
  FOREIGN KEY(`employeeID`) REFERENCES employee(`employeeID`)
);

-- need to insert a record into this table for each employee in the initial DB
INSERT INTO `passwordsalt` (`employeeID`, `passwordSalt`) VALUES
(1, '9l2akfab5j8hv3m7o7svazhd6kq0alby'),
(2, 'y6usx3h104e9bn4qolqzva6scfp65yxq'),
(1000, 'shh67lragl9n37kvxswjhuv9p4rz5j94'),
(1001, 'r32662dvupf3tdfzj8oxmff6pb5nbz7e'),
(1002, 'ky1m9t25taibjibpmvkiv4l90u9jwvnj'),
(1003, 'x8h1u4kk0y7zlpsvlss8hz6ic3c5w0gb'),
(1004, '9ok0c8uooqri3z02i2mxxykzm454fhjm'),
(1005, 'sffxyivncup4n4gfpj71e3pgcrpwj0ur'),
(1006, 'akfow73fx8qe9sqxb60lku871o4qidbo'),
(1007, '3q89kd9l61wfw3ctqro0cmy8gnst8ao5'),
(1008, 'k017nra7206q3001fmvd893qv5q2ce0r'),
(1009, 'uhntlxfhly0o8us3479wck97sj6nxiii'),
(1010, 'fkxzkd44nst938qytcnshpxa6krdg3y0'),
(1012, 'dwbi6rtqq9p6uvvipwtv5qd6rucoc4ab'),
(1013, 'br114qsdyt4fzwj2lby4zw36ypuap6g4'),
(1014, 'f3xonswow2r580hgfv30gz698pelrn8j');

-- need to modify the password column of the employee table 
-- to hold a hashed string that is 64 chars long
alter table employee
modify column Password varchar(64);

-- also need to update the employee table with their hashed/encrypted passwords (SHA256)
update `employee`
set Password = '527a85f332c92053d32e497113c9b145aa29aaa426141766a375e40f97d0071b'
where employeeID = 1;

update `employee`
set Password = '3933537e5729e243d375a870617da44a210e654a949915999d5ca474863665c9'
where employeeID = 2;

update `employee`
set Password = '2e2fdbe5ac28dbee96a202a1671844e78574274ac393982a20aa5f4849e6f9d8'
where employeeID = 1000;

update `employee`
set Password = '58eae166c860a46963ce7a928e12f049b55d60825815e228b022be40575ae9cb'
where employeeID = 1001;

update `employee`
set Password = '3f7ad054644005887b5b0486e4d2b1235bb2669aa97867fec2ebdb0283774efb'
where employeeID = 1002;

update `employee`
set Password = 'be6f8104c1e453aa50cca6ec2ef983ebf54437733f844638678c1f5177d21083'
where employeeID = 1003;

update `employee`
set Password = '1a96992d1fb12c7bf74febb76ebbb37f1c1a73b600a3ed9f934a75f5943f91d8'
where employeeID = 1004;

update `employee`
set Password = '59198d2799668662c8211b238b982315b9750b9cb0ae6ebaffe24c48dc85e81c'
where employeeID = 1005;

update `employee`
set Password = '3721df502cd69e50edfef071929430c6a0a511851d09b4572b092d845439067b'
where employeeID = 1006;

update `employee`
set Password = 'b6b99fd88830015de1432ea790d5370b76cf5aeab1f5c8b982f334cfc713131d'
where employeeID = 1007;

update `employee`
set Password = '7fb32419a52500593cddd2a60df7b4efa084118c6f681ab7eb0450584c2607b4'
where employeeID = 1008;

update `employee`
set Password = '75e617a7c81b01c9d1f00e4daa1142278a0a4ad0f517a6dabe771152bca19536'
where employeeID = 1009;

update `employee`
set Password = '271e4698a88368773fbb5154ed0202a2f4448754312ccd98164f1dd82cb03aa3'
where employeeID = 1010;

update `employee`
set Password = '784c443d9a52d9d673c44f2061e2fc3348903bcfdecd5dbeb6313d1b5b23ff0b'
where employeeID = 1012;

update `employee`
set Password = 'f4eb2a1acad30b95d58426e961cb0f95c8deec546f5bb0c0bad3bbefdfb09f1b'
where employeeID = 1013;

update `employee`
set Password = '4aea5d7f00ada32db2c3ac7415fff5415ff4ebb52fd0b841ab72892aef48346c'
where employeeID = 1014;

-- alter employee table - adding the loginAttempts column
-- default starting number for login attempts is 3
-- using tinyint since this should only ever be a very small int
alter table `employee`
add column loginAttempts tinyint NOT NULL Default 3;

-- alter employee table again - adding the madeFirstLogin column
-- to track if each employee made their first login yet or not, and
-- prompting them to changing the default password if not
-- using tinyint here too
alter table `employee`
add column madeFirstLogin tinyint(1) NOT NULL Default 0; 

-- alter user_permission table - adding the hasPermission column
-- to track if each employee has permission for that respective permission
-- using tinyint here too
alter table `user_permission`
add column hasPermission tinyint(1) NOT NULL Default 0;

-- alter item table - adding the Image file location
-- to track the file location for an item's image
alter table `item`
add column imageFileLocation varchar(255) DEFAULT NULL;

-- alter site table - adding an active field
-- to track if a site is active or not, default value will be 1
alter table `site`
add column active tinyint(1) NOT NULL Default 1;

-- alter supplier table - adding an active field
-- to track if a supplier is active or not, default value will be 1
alter table `supplier`
add column active tinyint(1) NOT NULL Default 1;

-- insert into the txntype table - new type for online orders
INSERT INTO `txntype` (`txnType`) VALUES
('Online Order');

-- insert into the permission table these additional permissions:
-- example: VIEWSITE
INSERT INTO `permission` (`permissionID`) VALUES
('VIEWSITE'), ('REJECTORDER'), ('VIEWINVENTORY'), ('EDITSUPPLIER'), 
('PICKUPSTOREORDER'), ('DELIVERSTOREORDER'), ('PREPAREONLINEORDER');

-- alter user_permission table - so that all default users of the system have READUSER access
-- the admin user (number 1) already has this but the others do not
-- also are giving EDITITEM access to the warehouse manager, cpatstone
INSERT INTO `user_permission` (`employeeID`, `permissionID`,  `hasPermission`) VALUES
(2, 'READUSER', 1),
(1000, 'READUSER', 1),
(1001, 'READUSER', 1),
(1002, 'READUSER', 1),
(1003, 'READUSER', 1),
(1004, 'READUSER', 1),
(1005, 'READUSER', 1),
(1006, 'READUSER', 1),
(1007, 'READUSER', 1),
(1008, 'READUSER', 1),
(1009, 'READUSER', 1),
(1010, 'READUSER', 1),
(1012, 'READUSER', 1),
(1013, 'READUSER', 1),
(1014, 'READUSER', 1),
(2, 'VIEWSITE', 1),
(1000, 'VIEWSITE', 1),
(1001, 'VIEWSITE', 1),
(1002, 'VIEWSITE', 1),
(1003, 'VIEWSITE', 1),
(1004, 'VIEWSITE', 1),
(1005, 'VIEWSITE', 1),
(1006, 'VIEWSITE', 1),
(1007, 'VIEWSITE', 1),
(1008, 'VIEWSITE', 1),
(1009, 'VIEWSITE', 1),
(1010, 'VIEWSITE', 1),
(1012, 'VIEWSITE', 1),
(1013, 'VIEWSITE', 1),
(1014, 'VIEWSITE', 1),
(1, 'VIEWINVENTORY', 1),
(2, 'VIEWINVENTORY', 1),
(1000, 'VIEWINVENTORY', 1),
(1001, 'VIEWINVENTORY', 1),
(1002, 'VIEWINVENTORY', 1),
(1003, 'VIEWINVENTORY', 1),
(1004, 'VIEWINVENTORY', 1),
(1005, 'VIEWINVENTORY', 1),
(1006, 'VIEWINVENTORY', 1),
(1007, 'VIEWINVENTORY', 1),
(1008, 'VIEWINVENTORY', 1),
(1009, 'VIEWINVENTORY', 1),
(1010, 'VIEWINVENTORY', 1),
(1012, 'VIEWINVENTORY', 1),
(1013, 'VIEWINVENTORY', 1),
(1014, 'VIEWINVENTORY', 1),
(1003, 'EDITITEM', 1),
-- adding VIEWORDERS for all store and warehouse manager(s)
(1002, 'VIEWORDERS', 1),
(1003, 'VIEWORDERS', 1),
(1005, 'VIEWORDERS', 1),
(1006, 'VIEWORDERS', 1),
(1007, 'VIEWORDERS', 1),
(1008, 'VIEWORDERS', 1),
(1009, 'VIEWORDERS', 1),
(1010, 'VIEWORDERS', 1),
-- adding CREATESTOREORDER for all store and warehouse manager(s)
(1002, 'CREATESTOREORDER', 1),
(1003, 'CREATESTOREORDER', 1),
(1005, 'CREATESTOREORDER', 1),
(1006, 'CREATESTOREORDER', 1),
(1007, 'CREATESTOREORDER', 1),
(1008, 'CREATESTOREORDER', 1),
(1009, 'CREATESTOREORDER', 1),
(1010, 'CREATESTOREORDER', 1),
-- adding PREPARESTOREORDER and RECEIVESTOREORDER for the warehouse manager
(1003, 'PREPARESTOREORDER', 1),
(1003, 'RECEIVESTOREORDER', 1),
-- adding REJECTORDER for the admin and warehouse manager
(1, 'REJECTORDER', 1),
(1003, 'REJECTORDER', 1),
-- adding FULFILSTOREORDER for the warehouse manager and warehouse employees
(1003, 'FULFILSTOREORDER', 1),
(1012, 'FULFILSTOREORDER', 1),
(1013, 'FULFILSTOREORDER', 1),
(1014, 'FULFILSTOREORDER', 1),
-- adding ACCEPTSTOREORDER for all store managers
(1002, 'ACCEPTSTOREORDER', 1),
(1005, 'ACCEPTSTOREORDER', 1),
(1006, 'ACCEPTSTOREORDER', 1),
(1007, 'ACCEPTSTOREORDER', 1),
(1008, 'ACCEPTSTOREORDER', 1),
(1009, 'ACCEPTSTOREORDER', 1),
(1010, 'ACCEPTSTOREORDER', 1),
-- adding ADDSUPPLIER for the warehouse manager and admin
(1, 'ADDSUPPLIER', 1),
(1003, 'ADDSUPPLIER', 1),
-- adding EDITSUPPLIER for the admin and warehouse manager
(1, 'EDITSUPPLIER', 1),
(1003, 'EDITSUPPLIER', 1),
-- adding PICKUPSTOREORDER for the admin, delivery driver and warehouse workers
(1, 'PICKUPSTOREORDER', 1),
(1004, 'PICKUPSTOREORDER', 1),
(1012, 'PICKUPSTOREORDER', 1),
(1013, 'PICKUPSTOREORDER', 1),
(1014, 'PICKUPSTOREORDER', 1),
-- adding DELIVERSTOREORDER for the admin, delivery driver, and all store managers
(1, 'DELIVERSTOREORDER', 1),
(1004, 'DELIVERSTOREORDER', 1),
(1002, 'DELIVERSTOREORDER', 1),
(1005, 'DELIVERSTOREORDER', 1),
(1006, 'DELIVERSTOREORDER', 1),
(1007, 'DELIVERSTOREORDER', 1),
(1008, 'DELIVERSTOREORDER', 1),
(1009, 'DELIVERSTOREORDER', 1),
(1010, 'DELIVERSTOREORDER', 1),
-- adding PREPAREONLINEORDER for all store managers
(1002, 'PREPAREONLINEORDER', 1),
(1005, 'PREPAREONLINEORDER', 1),
(1006, 'PREPAREONLINEORDER', 1),
(1007, 'PREPAREONLINEORDER', 1),
(1008, 'PREPAREONLINEORDER', 1),
(1009, 'PREPAREONLINEORDER', 1),
(1010, 'PREPAREONLINEORDER', 1);

-- for all records currently in the user_permission table, set hasPermission to 1
-- since all admin records in this table right now are all permissions that the admin user should have
update user_permission
set hasPermission = 1
where hasPermission = 0;

-- now need to insert permissions in user_permission for users besides the admin
-- NOTE: don't need READUSER since it's already been done above
INSERT INTO `user_permission` (`employeeID`, `permissionID`,  `hasPermission`) VALUES
(1, 'VIEWSITE', 1),
(1, 'PREPAREONLINEORDER', 1),
(2, 'ADDUSER', 0),
(2, 'EDITUSER', 0),
(2, 'DELETEUSER', 0),
(2, 'SETPERMISSION', 0),
(2, 'MOVEINVENTORY', 1),
(2, 'CREATESTOREORDER', 0),
(2, 'RECEIVESTOREORDER', 0),
(2, 'PREPARESTOREORDER', 0),
(2, 'FULFILSTOREORDER', 0),
(2, 'ADDITEMTOBACKORDER', 0),
(2, 'CREATEBACKORDER', 0),
(2, 'EDITSITE', 0),
(2, 'ADDSITE', 0),
(2, 'VIEWORDERS', 0),
(2, 'DELETELOCATION', 0),
(2, 'EDITINVENTORY', 0),
(2, 'EDITITEM', 0),
(2, 'DELIVERY', 1),
(2, 'ACCEPTSTOREORDER', 0),
(2, 'MODIFYRECORD', 0),
(2, 'CREATELOSS', 0),
(2, 'PROCESSRETURN', 0),
(2, 'ADDNEWPRODUCT', 0),
(2, 'EDITPRODUCT', 0),
(2, 'CREATESUPPLIERORDER', 0),
(2, 'CREATEREPORT', 0),
(2, 'REJECTORDER', 0),
(2, 'ADDSUPPLIER', 0),
(2, 'EDITSUPPLIER', 0),
(2, 'PICKUPSTOREORDER', 0),
(2, 'DELIVERSTOREORDER', 0),
(2, 'PREPAREONLINEORDER', 0),
(1000, 'ADDUSER', 0),
(1000, 'EDITUSER', 0),
(1000, 'DELETEUSER', 0),
(1000, 'SETPERMISSION', 0),
(1000, 'MOVEINVENTORY', 1),
(1000, 'CREATESTOREORDER', 0),
(1000, 'RECEIVESTOREORDER', 0),
(1000, 'PREPARESTOREORDER', 0),
(1000, 'FULFILSTOREORDER', 0),
(1000, 'ADDITEMTOBACKORDER', 0),
(1000, 'CREATEBACKORDER', 0),
(1000, 'EDITSITE', 0),
(1000, 'ADDSITE', 0),
(1000, 'VIEWORDERS', 0),
(1000, 'DELETELOCATION', 0),
(1000, 'EDITINVENTORY', 0),
(1000, 'EDITITEM', 0),
(1000, 'DELIVERY', 0),
(1000, 'ACCEPTSTOREORDER', 0),
(1000, 'MODIFYRECORD', 0),
(1000, 'CREATELOSS', 0),
(1000, 'PROCESSRETURN', 0),
(1000, 'ADDNEWPRODUCT', 0),
(1000, 'EDITPRODUCT', 0),
(1000, 'CREATESUPPLIERORDER', 0),
(1000, 'CREATEREPORT', 0),
(1000, 'REJECTORDER', 0),
(1000, 'ADDSUPPLIER', 0),
(1000, 'EDITSUPPLIER', 0),
(1000, 'PICKUPSTOREORDER', 0),
(1000, 'DELIVERSTOREORDER', 0),
(1000, 'PREPAREONLINEORDER', 0),
(1001, 'ADDUSER', 0),
(1001, 'EDITUSER', 0),
(1001, 'DELETEUSER', 0),
(1001, 'SETPERMISSION', 0),
(1001, 'MOVEINVENTORY', 1),
(1001, 'CREATESTOREORDER', 0),
(1001, 'RECEIVESTOREORDER', 0),
(1001, 'PREPARESTOREORDER', 0),
(1001, 'FULFILSTOREORDER', 0),
(1001, 'ADDITEMTOBACKORDER', 0),
(1001, 'CREATEBACKORDER', 0),
(1001, 'EDITSITE', 0),
(1001, 'ADDSITE', 0),
(1001, 'VIEWORDERS', 0),
(1001, 'DELETELOCATION', 0),
(1001, 'EDITINVENTORY', 0),
(1001, 'EDITITEM', 0),
(1001, 'DELIVERY', 0),
(1001, 'ACCEPTSTOREORDER', 0),
(1001, 'MODIFYRECORD', 0),
(1001, 'CREATELOSS', 0),
(1001, 'PROCESSRETURN', 0),
(1001, 'ADDNEWPRODUCT', 0),
(1001, 'EDITPRODUCT', 0),
(1001, 'CREATESUPPLIERORDER', 0),
(1001, 'CREATEREPORT', 0),
(1001, 'REJECTORDER', 0),
(1001, 'ADDSUPPLIER', 0),
(1001, 'EDITSUPPLIER', 0),
(1001, 'PICKUPSTOREORDER', 0),
(1001, 'DELIVERSTOREORDER', 0),
(1001, 'PREPAREONLINEORDER', 0),
(1002, 'ADDUSER', 0),
(1002, 'EDITUSER', 0),
(1002, 'DELETEUSER', 0),
(1002, 'SETPERMISSION', 0),
(1002, 'MOVEINVENTORY', 1),
(1002, 'RECEIVESTOREORDER', 0),
(1002, 'PREPARESTOREORDER', 0),
(1002, 'FULFILSTOREORDER', 0),
(1002, 'ADDITEMTOBACKORDER', 0),
(1002, 'CREATEBACKORDER', 0),
(1002, 'EDITSITE', 0),
(1002, 'ADDSITE', 0),
(1002, 'DELETELOCATION', 0),
(1002, 'EDITINVENTORY', 1),
(1002, 'EDITITEM', 0),
(1002, 'DELIVERY', 0),
(1002, 'MODIFYRECORD', 0),
(1002, 'CREATELOSS', 0),
(1002, 'PROCESSRETURN', 0),
(1002, 'ADDNEWPRODUCT', 0),
(1002, 'EDITPRODUCT', 0),
(1002, 'CREATESUPPLIERORDER', 0),
(1002, 'CREATEREPORT', 0),
(1002, 'REJECTORDER', 0),
(1002, 'ADDSUPPLIER', 0),
(1002, 'EDITSUPPLIER', 0),
(1002, 'PICKUPSTOREORDER', 0),
(1003, 'ADDUSER', 0),
(1003, 'EDITUSER', 0),
(1003, 'DELETEUSER', 0),
(1003, 'SETPERMISSION', 0),
(1003, 'MOVEINVENTORY', 1),
(1003, 'ADDITEMTOBACKORDER', 0),
(1003, 'CREATEBACKORDER', 0),
(1003, 'EDITSITE', 0),
(1003, 'ADDSITE', 0),
(1003, 'DELETELOCATION', 0),
(1003, 'EDITINVENTORY', 1),
(1003, 'DELIVERY', 0),
(1003, 'ACCEPTSTOREORDER', 0),
(1003, 'MODIFYRECORD', 0),
(1003, 'CREATELOSS', 0),
(1003, 'PROCESSRETURN', 0),
(1003, 'ADDNEWPRODUCT', 0),
(1003, 'EDITPRODUCT', 0),
(1003, 'CREATESUPPLIERORDER', 0),
(1003, 'CREATEREPORT', 0),
(1003, 'PICKUPSTOREORDER', 0),
(1003, 'DELIVERSTOREORDER', 0),
(1003, 'PREPAREONLINEORDER', 0),
(1004, 'ADDUSER', 0),
(1004, 'EDITUSER', 0),
(1004, 'DELETEUSER', 0),
(1004, 'SETPERMISSION', 0),
(1004, 'MOVEINVENTORY', 1),
(1004, 'CREATESTOREORDER', 0),
(1004, 'RECEIVESTOREORDER', 0),
(1004, 'PREPARESTOREORDER', 0),
(1004, 'FULFILSTOREORDER', 0),
(1004, 'ADDITEMTOBACKORDER', 0),
(1004, 'CREATEBACKORDER', 0),
(1004, 'EDITSITE', 0),
(1004, 'ADDSITE', 0),
(1004, 'VIEWORDERS', 0),
(1004, 'DELETELOCATION', 0),
(1004, 'EDITINVENTORY', 0),
(1004, 'EDITITEM', 0),
(1004, 'DELIVERY', 0),
(1004, 'ACCEPTSTOREORDER', 0),
(1004, 'MODIFYRECORD', 0),
(1004, 'CREATELOSS', 0),
(1004, 'PROCESSRETURN', 0),
(1004, 'ADDNEWPRODUCT', 0),
(1004, 'EDITPRODUCT', 0),
(1004, 'CREATESUPPLIERORDER', 0),
(1004, 'CREATEREPORT', 0),
(1004, 'REJECTORDER', 0),
(1004, 'ADDSUPPLIER', 0),
(1004, 'EDITSUPPLIER', 0),
(1004, 'PREPAREONLINEORDER', 0),
(1005, 'ADDUSER', 0),
(1005, 'EDITUSER', 0),
(1005, 'DELETEUSER', 0),
(1005, 'SETPERMISSION', 0),
(1005, 'MOVEINVENTORY', 1),
(1005, 'RECEIVESTOREORDER', 0),
(1005, 'PREPARESTOREORDER', 0),
(1005, 'FULFILSTOREORDER', 0),
(1005, 'ADDITEMTOBACKORDER', 0),
(1005, 'CREATEBACKORDER', 0),
(1005, 'EDITSITE', 0),
(1005, 'ADDSITE', 0),
(1005, 'DELETELOCATION', 0),
(1005, 'EDITINVENTORY', 1),
(1005, 'EDITITEM', 0),
(1005, 'DELIVERY', 0),
(1005, 'MODIFYRECORD', 0),
(1005, 'CREATELOSS', 0),
(1005, 'PROCESSRETURN', 0),
(1005, 'ADDNEWPRODUCT', 0),
(1005, 'EDITPRODUCT', 0),
(1005, 'CREATESUPPLIERORDER', 0),
(1005, 'CREATEREPORT', 0),
(1005, 'REJECTORDER', 0),
(1005, 'ADDSUPPLIER', 0),
(1005, 'EDITSUPPLIER', 0),
(1005, 'PICKUPSTOREORDER', 0),
(1006, 'ADDUSER', 0),
(1006, 'EDITUSER', 0),
(1006, 'DELETEUSER', 0),
(1006, 'SETPERMISSION', 0),
(1006, 'MOVEINVENTORY', 1),
(1006, 'RECEIVESTOREORDER', 0),
(1006, 'PREPARESTOREORDER', 0),
(1006, 'FULFILSTOREORDER', 0),
(1006, 'ADDITEMTOBACKORDER', 0),
(1006, 'CREATEBACKORDER', 0),
(1006, 'EDITSITE', 0),
(1006, 'ADDSITE', 0),
(1006, 'DELETELOCATION', 0),
(1006, 'EDITINVENTORY', 1),
(1006, 'EDITITEM', 0),
(1006, 'DELIVERY', 0),
(1006, 'MODIFYRECORD', 0),
(1006, 'CREATELOSS', 0),
(1006, 'PROCESSRETURN', 0),
(1006, 'ADDNEWPRODUCT', 0),
(1006, 'EDITPRODUCT', 0),
(1006, 'CREATESUPPLIERORDER', 0),
(1006, 'CREATEREPORT', 0),
(1006, 'REJECTORDER', 0),
(1006, 'ADDSUPPLIER', 0),
(1006, 'EDITSUPPLIER', 0),
(1006, 'PICKUPSTOREORDER', 0),
(1007, 'ADDUSER', 0),
(1007, 'EDITUSER', 0),
(1007, 'DELETEUSER', 0),
(1007, 'SETPERMISSION', 0),
(1007, 'MOVEINVENTORY', 1),
(1007, 'RECEIVESTOREORDER', 0),
(1007, 'PREPARESTOREORDER', 0),
(1007, 'FULFILSTOREORDER', 0),
(1007, 'ADDITEMTOBACKORDER', 0),
(1007, 'CREATEBACKORDER', 0),
(1007, 'EDITSITE', 0),
(1007, 'ADDSITE', 0),
(1007, 'DELETELOCATION', 0),
(1007, 'EDITINVENTORY', 1),
(1007, 'EDITITEM', 0),
(1007, 'DELIVERY', 0),
(1007, 'MODIFYRECORD', 0),
(1007, 'CREATELOSS', 0),
(1007, 'PROCESSRETURN', 0),
(1007, 'ADDNEWPRODUCT', 0),
(1007, 'EDITPRODUCT', 0),
(1007, 'CREATESUPPLIERORDER', 0),
(1007, 'CREATEREPORT', 0),
(1007, 'REJECTORDER', 0),
(1007, 'ADDSUPPLIER', 0),
(1007, 'EDITSUPPLIER', 0),
(1007, 'PICKUPSTOREORDER', 0),
(1008, 'ADDUSER', 0),
(1008, 'EDITUSER', 0),
(1008, 'DELETEUSER', 0),
(1008, 'SETPERMISSION', 0),
(1008, 'MOVEINVENTORY', 1),
(1008, 'RECEIVESTOREORDER', 0),
(1008, 'PREPARESTOREORDER', 0),
(1008, 'FULFILSTOREORDER', 0),
(1008, 'ADDITEMTOBACKORDER', 0),
(1008, 'CREATEBACKORDER', 0),
(1008, 'EDITSITE', 0),
(1008, 'ADDSITE', 0),
(1008, 'DELETELOCATION', 0),
(1008, 'EDITINVENTORY', 1),
(1008, 'EDITITEM', 0),
(1008, 'DELIVERY', 0),
(1008, 'MODIFYRECORD', 0),
(1008, 'CREATELOSS', 0),
(1008, 'PROCESSRETURN', 0),
(1008, 'ADDNEWPRODUCT', 0),
(1008, 'EDITPRODUCT', 0),
(1008, 'CREATESUPPLIERORDER', 0),
(1008, 'CREATEREPORT', 0),
(1008, 'REJECTORDER', 0),
(1008, 'ADDSUPPLIER', 0),
(1008, 'EDITSUPPLIER', 0),
(1008, 'PICKUPSTOREORDER', 0),
(1009, 'ADDUSER', 0),
(1009, 'EDITUSER', 0),
(1009, 'DELETEUSER', 0),
(1009, 'SETPERMISSION', 0),
(1009, 'MOVEINVENTORY', 1),
(1009, 'RECEIVESTOREORDER', 0),
(1009, 'PREPARESTOREORDER', 0),
(1009, 'FULFILSTOREORDER', 0),
(1009, 'ADDITEMTOBACKORDER', 0),
(1009, 'CREATEBACKORDER', 0),
(1009, 'EDITSITE', 0),
(1009, 'ADDSITE', 0),
(1009, 'DELETELOCATION', 0),
(1009, 'EDITINVENTORY', 1),
(1009, 'EDITITEM', 0),
(1009, 'DELIVERY', 0),
(1009, 'MODIFYRECORD', 0),
(1009, 'CREATELOSS', 0),
(1009, 'PROCESSRETURN', 0),
(1009, 'ADDNEWPRODUCT', 0),
(1009, 'EDITPRODUCT', 0),
(1009, 'CREATESUPPLIERORDER', 0),
(1009, 'CREATEREPORT', 0),
(1009, 'REJECTORDER', 0),
(1009, 'ADDSUPPLIER', 0),
(1009, 'EDITSUPPLIER', 0),
(1009, 'PICKUPSTOREORDER', 0),
(1010, 'ADDUSER', 0),
(1010, 'EDITUSER', 0),
(1010, 'DELETEUSER', 0),
(1010, 'SETPERMISSION', 0),
(1010, 'MOVEINVENTORY', 1),
(1010, 'RECEIVESTOREORDER', 0),
(1010, 'PREPARESTOREORDER', 0),
(1010, 'FULFILSTOREORDER', 0),
(1010, 'ADDITEMTOBACKORDER', 0),
(1010, 'CREATEBACKORDER', 0),
(1010, 'EDITSITE', 0),
(1010, 'ADDSITE', 0),
(1010, 'DELETELOCATION', 0),
(1010, 'EDITINVENTORY', 1),
(1010, 'EDITITEM', 0),
(1010, 'DELIVERY', 0),
(1010, 'MODIFYRECORD', 0),
(1010, 'CREATELOSS', 0),
(1010, 'PROCESSRETURN', 0),
(1010, 'ADDNEWPRODUCT', 0),
(1010, 'EDITPRODUCT', 0),
(1010, 'CREATESUPPLIERORDER', 0),
(1010, 'CREATEREPORT', 0),
(1010, 'REJECTORDER', 0),
(1010, 'ADDSUPPLIER', 0),
(1010, 'EDITSUPPLIER', 0),
(1010, 'PICKUPSTOREORDER', 0),
(1012, 'ADDUSER', 0),
(1012, 'EDITUSER', 0),
(1012, 'DELETEUSER', 0),
(1012, 'SETPERMISSION', 0),
(1012, 'MOVEINVENTORY', 1),
(1012, 'CREATESTOREORDER', 0),
(1012, 'RECEIVESTOREORDER', 0),
(1012, 'PREPARESTOREORDER', 0),
(1012, 'ADDITEMTOBACKORDER', 0),
(1012, 'CREATEBACKORDER', 0),
(1012, 'EDITSITE', 0),
(1012, 'ADDSITE', 0),
(1012, 'VIEWORDERS', 0),
(1012, 'DELETELOCATION', 0),
(1012, 'EDITINVENTORY', 0),
(1012, 'EDITITEM', 0),
(1012, 'DELIVERY', 0),
(1012, 'ACCEPTSTOREORDER', 0),
(1012, 'MODIFYRECORD', 0),
(1012, 'CREATELOSS', 0),
(1012, 'PROCESSRETURN', 0),
(1012, 'ADDNEWPRODUCT', 0),
(1012, 'EDITPRODUCT', 0),
(1012, 'CREATESUPPLIERORDER', 0),
(1012, 'CREATEREPORT', 0),
(1012, 'REJECTORDER', 0),
(1012, 'ADDSUPPLIER', 0),
(1012, 'EDITSUPPLIER', 0),
(1012, 'DELIVERSTOREORDER', 0),
(1012, 'PREPAREONLINEORDER', 0),
(1013, 'ADDUSER', 0),
(1013, 'EDITUSER', 0),
(1013, 'DELETEUSER', 0),
(1013, 'SETPERMISSION', 0),
(1013, 'MOVEINVENTORY', 1),
(1013, 'CREATESTOREORDER', 0),
(1013, 'RECEIVESTOREORDER', 0),
(1013, 'PREPARESTOREORDER', 0),
(1013, 'ADDITEMTOBACKORDER', 0),
(1013, 'CREATEBACKORDER', 0),
(1013, 'EDITSITE', 0),
(1013, 'ADDSITE', 0),
(1013, 'VIEWORDERS', 0),
(1013, 'DELETELOCATION', 0),
(1013, 'EDITINVENTORY', 0),
(1013, 'EDITITEM', 0),
(1013, 'DELIVERY', 0),
(1013, 'ACCEPTSTOREORDER', 0),
(1013, 'MODIFYRECORD', 0),
(1013, 'CREATELOSS', 0),
(1013, 'PROCESSRETURN', 0),
(1013, 'ADDNEWPRODUCT', 0),
(1013, 'EDITPRODUCT', 0),
(1013, 'CREATESUPPLIERORDER', 0),
(1013, 'CREATEREPORT', 0),
(1013, 'ADDSUPPLIER', 0),
(1013, 'EDITSUPPLIER', 0),
(1013, 'REJECTORDER', 0),
(1013, 'DELIVERSTOREORDER', 0),
(1013, 'PREPAREONLINEORDER', 0),
(1014, 'ADDUSER', 0),
(1014, 'EDITUSER', 0),
(1014, 'DELETEUSER', 0),
(1014, 'SETPERMISSION', 0),
(1014, 'MOVEINVENTORY', 1),
(1014, 'CREATESTOREORDER', 0),
(1014, 'RECEIVESTOREORDER', 0),
(1014, 'PREPARESTOREORDER', 0),
(1014, 'ADDITEMTOBACKORDER', 0),
(1014, 'CREATEBACKORDER', 0),
(1014, 'EDITSITE', 0),
(1014, 'ADDSITE', 0),
(1014, 'VIEWORDERS', 0),
(1014, 'DELETELOCATION', 0),
(1014, 'EDITINVENTORY', 0),
(1014, 'EDITITEM', 0),
(1014, 'DELIVERY', 0),
(1014, 'ACCEPTSTOREORDER', 0),
(1014, 'MODIFYRECORD', 0),
(1014, 'CREATELOSS', 0),
(1014, 'PROCESSRETURN', 0),
(1014, 'ADDNEWPRODUCT', 0),
(1014, 'EDITPRODUCT', 0),
(1014, 'CREATESUPPLIERORDER', 0),
(1014, 'CREATEREPORT', 0),
(1014, 'REJECTORDER', 0),
(1014, 'EDITSUPPLIER', 0),
(1014, 'ADDSUPPLIER', 0),
(1014, 'DELIVERSTOREORDER', 0),
(1014, 'PREPAREONLINEORDER', 0);

-- Trigger #1 - includes transaction audit activity
-- after UPDATEs on the txn table
DELIMITER $$

CREATE TRIGGER afterTxnUpdate
AFTER UPDATE
ON txn FOR EACH ROW
BEGIN

	-- if the new status doesn't equal the old status and 
	-- if the new status is either complete or delivered
	-- inserting the siteIDTo (destination site) then
    IF OLD.status <> new.status and (new.status = "Complete" or new.status = "Delivered") THEN
        INSERT INTO txnaudit(txnID, txnType, status, txnDate, SiteID, deliveryID, notes)
        VALUES (new.txnID, new.txnType, new.status, NOW(), new.SiteIDTo, new.deliveryID, new.notes);
	
	-- else if - the new status doesn't equal the old status and 
	-- if the new status is NOT complete or delivered
	-- inserting the siteIDFrom (starting site) then
    ELSEIF OLD.status <> new.status and (new.status <> "Complete" or new.status <> "Delivered") THEN
        INSERT INTO txnaudit(txnID, txnType, status, txnDate, SiteID, deliveryID, notes)
        VALUES (new.txnID, new.txnType, new.status, NOW(), new.SiteIDFrom, new.deliveryID, new.notes);
	END IF;
	
	-- The IFs below are for updating inventory quantities at sites based on an order's progression
	-- if the old status (before the update) is delivered or in progress AND
	-- if the new status is 'Complete', meaning a txn/order is already delivered to a site like a store
	-- AND the txn is a store, emergency, or back order then
	IF old.status IN ('Delivered', 'In progress') and new.status = 'Complete' and new.txnType IN ('Store Order', 'Emergency', 'Back Order') then
	-- call the stored procedure from this trigger
	CALL updateTruckToStoreInventory(new.txnID, new.siteIDTo);
	
	END IF;
	
	-- if the old status (before the update) is Assembled AND
	-- if the new status is 'In Transit', meaning that an assembled txn/order has been loaded onto a truck now and is in transit to a site
	-- AND the txn is a store, emergency, or back order then
	IF old.status = 'Assembled' and new.status = 'In Transit' and new.txnType IN ('Store Order', 'Emergency', 'Back Order') then
	-- call the stored procedure from this trigger
	CALL updateBayToTruckInventory(new.txnID);
	
	END IF;
	
	-- if the old status (before the update) is Assembling AND
	-- if the new status is 'Assembled', meaning that an assembled txn/order has been fulfilled/assembled at the warehouse bay and is awaiting pickup
	-- AND the txn is a store, emergency, or back order then
	IF old.status = 'Assembling' and new.status = 'Assembled' and new.txnType IN ('Store Order', 'Emergency', 'Back Order') then
	-- call the stored procedure from this trigger
	CALL updateOrderToWarehouseBayInventory(new.txnID);
	
	END IF;
	
	-- if the old status (before the update) is New, Submitted, or Assembling AND
	-- if the new status is Rejected or Cancelled, meaning that an order early on has been rejected/cancelled by the warehouse for example
	-- AND the txn is a store or emergency order then
	-- basically want to put the quantity for items in a rejected order back to the warehouse
	IF old.status IN ('New', 'Submitted', 'Assembling') and new.status IN ('Rejected', 'Cancelled') and new.txnType IN ('Store Order', 'Emergency') then
	-- call the stored procedure from this trigger
	CALL updateOrderToWarehouseInventory(new.txnID);
	
	END IF;
	
END$$

DELIMITER ;

-- Trigger #2 - for transaction audit activity
-- after INSERTs on the txn table
DELIMITER $$

CREATE TRIGGER afterTxnInsert
AFTER INSERT
ON txn FOR EACH ROW
BEGIN

-- insert into the txnaudit table
INSERT INTO txnaudit(txnID, txnType, status, txnDate, SiteID, deliveryID, notes)
VALUES (new.txnID, new.txnType, new.status, NOW(), new.SiteIDFrom, new.deliveryID, new.notes);
	
END$$

DELIMITER ;

-- Trigger #3 - when inserting new users/employees into the DB
-- after INSERTs on the employee table
DELIMITER $$

CREATE TRIGGER afterEmployeeInsert
AFTER INSERT
ON employee FOR EACH ROW
BEGIN

-- insert into the user_permission table
-- new user(s) will automatically have the following permissions turned on:
-- READUSER, VIEWSITE, MOVEINVENTORY, VIEWINVENTORY
INSERT INTO user_permission(employeeID, permissionID, hasPermission)
VALUES (new.employeeID, 'ADDUSER', 0),
(new.employeeID, 'EDITUSER', 0),
(new.employeeID, 'DELETEUSER', 0),
(new.employeeID, 'READUSER', 1),
(new.employeeID, 'SETPERMISSION', 0),
(new.employeeID, 'MOVEINVENTORY', 1),
(new.employeeID, 'CREATESTOREORDER', 0),
(new.employeeID, 'RECEIVESTOREORDER', 0),
(new.employeeID, 'PREPARESTOREORDER', 0),
(new.employeeID, 'FULFILSTOREORDER', 0),
(new.employeeID, 'ADDITEMTOBACKORDER', 0),
(new.employeeID, 'CREATEBACKORDER', 0),
(new.employeeID, 'EDITSITE', 0),
(new.employeeID, 'ADDSITE', 0),
(new.employeeID, 'VIEWORDERS', 0),
(new.employeeID, 'DELETELOCATION', 0),
(new.employeeID, 'EDITINVENTORY', 0),
(new.employeeID, 'EDITITEM', 0),
(new.employeeID, 'DELIVERY', 0),
(new.employeeID, 'ACCEPTSTOREORDER', 0),
(new.employeeID, 'MODIFYRECORD', 0),
(new.employeeID, 'CREATELOSS', 0),
(new.employeeID, 'PROCESSRETURN', 0),
(new.employeeID, 'ADDNEWPRODUCT', 0),
(new.employeeID, 'EDITPRODUCT', 0),
(new.employeeID, 'CREATESUPPLIERORDER', 0),
(new.employeeID, 'CREATEREPORT', 0), 
(new.employeeID, 'VIEWSITE', 1),
(new.employeeID, 'REJECTORDER', 0),
(new.employeeID, 'VIEWINVENTORY', 1),
(new.employeeID, 'ADDSUPPLIER', 0),
(new.employeeID, 'EDITSUPPLIER', 0),
(new.employeeID, 'PICKUPSTOREORDER', 0),
(new.employeeID, 'DELIVERSTOREORDER', 0),
(new.employeeID, 'PREPAREONLINEORDER', 0);

END$$

DELIMITER ;

-- stored procedure #1
DELIMITER $$

CREATE PROCEDURE insertLowInventoryIntoStoreOrder(
IN inSiteID int,
IN inTxnID int
)
BEGIN

-- declare variables here before the cursor
-- need variables for each field in the SELECT statement below
declare itemIDVar int;
declare caseSizeVar int;
declare quantityVar int;
declare reorderThresholdVar int;
declare optimumThresholdVar int;
declare quantityNeededVar int DEFAULT 0;
declare neededCasesVar int DEFAULT 0;
declare quantityAvailableVar int DEFAULT 0;

-- need a flag variable, to let us know we're done with the cursor and can safely exit
declare done int DEFAULT 0;

-- declare the CURSOR
declare inventoryCursor cursor for
select iv.itemID, i.caseSize, iv.quantity, iv.reorderThreshold, iv.optimumThreshold
from inventory iv
inner join item i on iv.itemID = i.itemID
where iv.siteID = inSiteID and iv.quantity <= iv.reorderThreshold;

-- need the handler for when at the end of the cursor
declare continue handler for not found
set done = 1;

-- open the cursor
open inventoryCursor;

-- loop thru the cursor
mainLoop: loop

-- fetch the cursor in the loop
fetch inventoryCursor into itemIDVar, caseSizeVar, quantityVar, reorderThresholdVar, optimumThresholdVar;

-- if we hit the end of the cursor then leave the loop
if done = 1 then
leave mainLoop;
end if;

-- reset value of neededCasesVar to 0 at start of loop
set neededCasesVar = 0;

-- calculate the amount/quantity that is needed
set quantityNeededVar = optimumThresholdVar - quantityVar;

-- get the quantity available for an item in inventory in the warehouse (site ID of 2)
select quantity
into quantityAvailableVar
from inventory
where siteID = 2 and itemID = itemIDVar;

-- inner while loop
-- while the needed amount of cases is under the optimum threshold
WHILE neededCasesVar < quantityNeededVar DO
set neededCasesVar = neededCasesVar + caseSizeVar;
END WHILE;

IF quantityAvailableVar >= caseSizeVar and quantityAvailableVar < neededCasesVar then
set neededCasesVar = caseSizeVar;

-- insert needed item record into the txnitems table
INSERT INTO `txnitems` (`txnID`, `ItemID`, `quantity`,`notes`) 
VALUES (inTxnID, itemIDVar, neededCasesVar, '');

-- update the inventory table - for the item at the warehouse (siteID of 2)
-- NOTE: may have to come back and update this later if not working properly
update inventory
set quantity = quantityAvailableVar - neededCasesVar
where siteID = 2 and itemID = itemIDVar;

-- NOTE: make changes to this IF statement
ELSEIF quantityAvailableVar >= neededCasesVar THEN

-- insert needed item record into the txnitems table
INSERT INTO `txnitems` (`txnID`, `ItemID`, `quantity`,`notes`) 
VALUES (inTxnID, itemIDVar, neededCasesVar, '');

-- update the inventory table - for the item at the warehouse (siteID of 2)
-- NOTE: may have to come back and update this later if not working properly
update inventory
set quantity = quantityAvailableVar - neededCasesVar
where siteID = 2 and itemID = itemIDVar;

END IF;

-- end the main loop for the cursor
end loop;

-- close the cursor
close inventoryCursor;

END $$

DELIMITER ;

-- Trigger #4 - for automatically inserting items into a transaction
-- after INSERTs on the txn table
DELIMITER $$

CREATE TRIGGER afterTxnInsert2
AFTER INSERT
ON txn FOR EACH ROW
BEGIN

-- if the transaction type is a store order then
IF new.txnType = 'Store Order' THEN
-- call the stored procedure from this trigger
CALL insertLowInventoryIntoStoreOrder(new.siteIDTo, new.txnID);

END IF;
	
END$$

DELIMITER ;

-- test insert record for the procedure and trigger above
-- INSERT INTO `txn` (`txnID`, `siteIDTo`, `siteIDFrom`, `status`, `shipDate`, `txnType`, `barCode`, `createdDate`, `emergencyDelivery`, `deliveryID`,`notes`) VALUES 
-- ('300', '6', '2', 'New', NOW(), 'Store Order', '111222333776', NOW(), '0', NULL, '');

-- stored procedure #2
DELIMITER $$

CREATE PROCEDURE insertInventoryBackIntoWarehouse(
IN inQuantity int,
IN inItemID int
)
BEGIN

-- shouldn't need a cursor for this stored procedure
-- declare variables here before the select statement below
-- need variables for each field in the SELECT statement below
declare itemIDVar int;
declare quantityVar int;

-- getting the current quantity of the item in the warehouse
-- warehouse site ID is 2
select itemID, quantity
into itemIDVar, quantityVar
from inventory
where siteID = 2 and itemID = inItemID;

-- update the inventory table - for the one specific item at the warehouse (siteID: 2)
-- NOTE: may have to come back and update this later if not working properly
update inventory
set quantity = quantityVar + inQuantity
where siteID = 2 and itemID = inItemID;

END $$

DELIMITER ;

-- stored procedure #3
DELIMITER $$

CREATE PROCEDURE updateWarehouseInventory(
IN inQuantityOld int,
IN inQuantityNew int,
IN inItemID int
)
BEGIN

-- shouldn't need a cursor for this stored procedure
-- declare variables here before the select statement below
-- need variables for each field in the SELECT statement below
declare itemIDVar int;
declare quantityVar int;

-- getting the current quantity of the item in the warehouse
-- warehouse site ID is 2
select itemID, quantity
into itemIDVar, quantityVar
from inventory
where siteID = 2 and itemID = inItemID;

-- if - quantity INCREASE for item in the txn then
IF inQuantityNew > inQuantityOld THEN

-- update the inventory table - for the one specific item at the warehouse (siteID: 2)
update inventory
set quantity = quantityVar - (inQuantityNew - inQuantityOld)
where siteID = 2 and itemID = inItemID;

-- else if - quantity DECREASE for item in the txn then
ELSEIF inQuantityNew < inQuantityOld THEN

-- update the inventory table - for the one specific item at the warehouse (siteID: 2)
update inventory
set quantity = quantityVar + (inQuantityOld - inQuantityNew)
where siteID = 2 and itemID = inItemID;

END IF;

END $$

DELIMITER ;

-- stored procedure #4
DELIMITER $$

CREATE PROCEDURE removeInventoryFromWarehouse(
IN inQuantity int,
IN inItemID int
)
BEGIN

-- shouldn't need a cursor for this stored procedure
-- declare variables here before the select statement below
-- need variables for each field in the SELECT statement below
declare itemIDVar int;
declare quantityVar int;
declare quantityVar2 int;

-- getting the current quantity of the item in the warehouse
-- warehouse site ID is 2
select itemID, quantity
into itemIDVar, quantityVar
from inventory
where siteID = 2 and itemID = inItemID;

-- update the inventory table - for the one specific item at the warehouse (siteID: 2)
update inventory
set quantity = quantityVar - inQuantity
where siteID = 2 and itemID = inItemID;

-- getting the current quantity of the item in the warehouse (again)
-- warehouse site ID is 2
select itemID, quantity
into itemIDVar, quantityVar2
from inventory
where siteID = 2 and itemID = inItemID;

-- if the updated quantity is less than 0, then set it to 0
-- NOTE: may try and find an alternative fix for this later
IF quantityVar2 < 0 THEN

-- then update the quantity for the item in the warehouse to be 0
update inventory
set quantity = 0
where siteID = 2 and itemID = inItemID;

END IF;

END $$

DELIMITER ;

-- stored procedure #5
DELIMITER $$

CREATE PROCEDURE updateTruckToStoreInventory(
IN inTxnID int,
IN inSiteIDTo int
)
BEGIN

-- declare variables here before the select statement below
-- need variables for each field in the SELECT statement below
declare itemIDVar int;
declare quantityVar int;
declare truckQuantityVar int;
declare storeQuantityVar int;

-- need a flag variable, to let us know we're done with the cursor and can safely exit
declare done int DEFAULT 0;

-- declare the cursor
declare txnItemsCursor cursor for
select itemID, quantity
from txnitems
where txnID = inTxnID;

-- need the handler for when at the end of the cursor
declare continue handler for not found
set done = 1;

-- open the cursor
open txnItemsCursor;

-- loop thru the cursor
mainLoop: loop

-- fetch the cursor in the loop
fetch txnItemsCursor into itemIDVar, quantityVar;

-- if we hit the end of the cursor then leave the loop
if done = 1 then
leave mainLoop;
end if;

-- get the truck quantity for the item
select quantity
into truckQuantityVar
from inventory
where siteID = 1 and itemID = itemIDVar;

-- get the store quantity for the item
select quantity
into storeQuantityVar
from inventory
where siteID = inSiteIDTo and itemID = itemIDVar;

-- update (remove) the quantity for the item from the truck
update inventory
set quantity = truckQuantityVar - quantityVar
where siteID = 1 and itemID = itemIDVar;

-- update (add) the quantity for the item to the store from the truck
update inventory
set quantity = storeQuantityVar + quantityVar, itemLocation = 'STOREROOM'
where siteID = inSiteIDTo and itemID = itemIDVar;

-- end the main loop for the cursor
end loop;

-- close the cursor
close txnItemsCursor;

END $$

DELIMITER ;

-- stored procedure #6
DELIMITER $$

CREATE PROCEDURE updateBayToTruckInventory(
IN inTxnID int
)
BEGIN

-- declare variables here before the select statement below
-- need variables for each field in the SELECT statement below
declare itemIDVar int;
declare quantityVar int;
declare truckQuantityVar int;
declare warehouseBayQuantityVar int;

-- need a flag variable, to let us know we're done with the cursor and can safely exit
declare done int DEFAULT 0;

-- declare the cursor
declare txnItemsCursor cursor for
select itemID, quantity
from txnitems
where txnID = inTxnID;

-- need the handler for when at the end of the cursor
declare continue handler for not found
set done = 1;

-- open the cursor
open txnItemsCursor;

-- loop thru the cursor
mainLoop: loop

-- fetch the cursor in the loop
fetch txnItemsCursor into itemIDVar, quantityVar;

-- if we hit the end of the cursor then leave the loop
if done = 1 then
leave mainLoop;
end if;

-- get the current truck quantity for the item
select quantity
into truckQuantityVar
from inventory
where siteID = 1 and itemID = itemIDVar;

-- get the current warehouse bay quantity for the item
select quantity
into warehouseBayQuantityVar
from inventory
where siteID = 11 and itemID = itemIDVar;

-- update (add) the quantity for the item in the order to the truck inventory
update inventory
set quantity = truckQuantityVar + quantityVar, itemLocation = 'ON TRUCK'
where siteID = 1 and itemID = itemIDVar;

-- also update (subtract) the quantity for the item in the order from the warehouse bay inventory
-- and update the itemLocation for each item to it's default value (0) for the warehouse bay
update inventory
set quantity = warehouseBayQuantityVar - quantityVar, itemLocation = '0'
where siteID = 11 and itemID = itemIDVar;

-- end the main loop for the cursor
end loop;

-- close the cursor
close txnItemsCursor;

END $$

DELIMITER ;

-- stored procedure #7
DELIMITER $$

CREATE PROCEDURE updateOrderToWarehouseBayInventory(
IN inTxnID int
)
BEGIN

-- declare variables here before the select statement below
-- need variables for each field in the SELECT statement below
declare itemIDVar int;
declare quantityVar int;
declare warehouseBayQuantityVar int;

-- need a flag variable, to let us know we're done with the cursor and can safely exit
declare done int DEFAULT 0;

-- declare the cursor
declare txnItemsCursor cursor for
select itemID, quantity
from txnitems
where txnID = inTxnID;

-- need the handler for when at the end of the cursor
declare continue handler for not found
set done = 1;

-- open the cursor
open txnItemsCursor;

-- loop thru the cursor
mainLoop: loop

-- fetch the cursor in the loop
fetch txnItemsCursor into itemIDVar, quantityVar;

-- if we hit the end of the cursor then leave the loop
if done = 1 then
leave mainLoop;
end if;

-- get the current warehouse bay quantity for the item
select quantity
into warehouseBayQuantityVar
from inventory
where siteID = 11 and itemID = itemIDVar;

-- update (add) the quantity for the item in the order to the truck inventory
update inventory
set quantity = warehouseBayQuantityVar + quantityVar, itemLocation = CONCAT('', inTxnID)
where siteID = 11 and itemID = itemIDVar;

-- end the main loop for the cursor
end loop;

-- close the cursor
close txnItemsCursor;

END $$

DELIMITER ;

-- stored procedure #8
DELIMITER $$

CREATE PROCEDURE updateOrderToWarehouseInventory(
IN inTxnID int
)
BEGIN

-- declare variables here before the select statement below
-- need variables for each field in the SELECT statement below
declare itemIDVar int;
declare quantityVar int;
declare warehouseQuantityVar int;

-- need a flag variable, to let us know we're done with the cursor and can safely exit
declare done int DEFAULT 0;

-- declare the cursor
declare txnItemsCursor cursor for
select itemID, quantity
from txnitems
where txnID = inTxnID;

-- need the handler for when at the end of the cursor
declare continue handler for not found
set done = 1;

-- open the cursor
open txnItemsCursor;

-- loop thru the cursor
mainLoop: loop

-- fetch the cursor in the loop
fetch txnItemsCursor into itemIDVar, quantityVar;

-- if we hit the end of the cursor then leave the loop
if done = 1 then
leave mainLoop;
end if;

-- get the current warehouse quantity for the item
select quantity
into warehouseQuantityVar
from inventory
where siteID = 2 and itemID = itemIDVar;

-- update (add) the quantity for the item in the order back to the warehouse inventory
update inventory
set quantity = warehouseQuantityVar + quantityVar
where siteID = 2 and itemID = itemIDVar;

-- end the main loop for the cursor
end loop;

-- close the cursor
close txnItemsCursor;

END $$

DELIMITER ;

-- stored procedure #9
DELIMITER $$

CREATE PROCEDURE removeInventoryFromStore(
IN inQuantity int,
IN inItemID int,
IN inSiteIDFrom int
)
BEGIN

-- shouldn't need a cursor for this stored procedure
-- declare variables here before the select statement below
-- need variables for each field in the SELECT statement below
declare itemIDVar int;
declare quantityVar int;
declare quantityVar2 int;

-- getting the current quantity of the item in the store
-- based on the siteID sent into this procedure
select itemID, quantity
into itemIDVar, quantityVar
from inventory
where siteID = inSiteIDFrom and itemID = inItemID;

-- update the inventory table - for the one specific item at the site ID sent in
update inventory
set quantity = quantityVar - inQuantity
where siteID = inSiteIDFrom and itemID = inItemID;

-- getting the current quantity of the item in the store (again)
-- based on the site ID sent into this procedure
select itemID, quantity
into itemIDVar, quantityVar2
from inventory
where siteID = inSiteIDFrom and itemID = inItemID;

-- if the updated quantity is less than 0, then set it to 0
-- NOTE: may try and find an alternative fix for this later
IF quantityVar2 < 0 THEN

-- then update the quantity for the item in the warehouse to be 0
update inventory
set quantity = 0
where siteID = inSiteIDFrom and itemID = inItemID;

END IF;

END $$

DELIMITER ;

-- Trigger #5 - for automatically adding quantity for an item back to the warehouse inventory
-- after DELETEs on the txnitems table
DELIMITER $$

CREATE TRIGGER afterTxnItemsDelete
AFTER DELETE
ON txnitems FOR EACH ROW
BEGIN

declare txnTypeVar varchar(20);

select txnType
into txnTypeVar
from txn
where txnID = old.txnID;

IF txnTypeVar IN ('Store Order', 'Emergency') THEN
-- call the stored procedure from this trigger
-- are inserting the deleted item quantity from a txn back into the warehouse inventory
CALL insertInventoryBackIntoWarehouse(old.quantity, old.itemID);

END IF;
	
END$$

DELIMITER ;

-- Trigger #6 - for automatically adding OR removing quantity for an item back to the warehouse inventory
-- after UPDATEs on the txnitems table
DELIMITER $$

CREATE TRIGGER afterTxnItemsUpdate
AFTER UPDATE
ON txnitems FOR EACH ROW
BEGIN

declare txnTypeVar varchar(20);

select txnType
into txnTypeVar
from txn
where txnID = old.txnID;

IF txnTypeVar IN ('Store Order', 'Emergency') THEN
-- call the stored procedure from this trigger
-- are inserting the deleted item quantity from a txn back into the warehouse inventory
CALL updateWarehouseInventory(old.quantity, new.quantity, old.itemID);

END IF;
	
END$$

DELIMITER ;

-- Trigger #7 - for automatically removing quantity for an item back from the warehouse inventory
-- after INSERTs on the txnitems table
DELIMITER $$

CREATE TRIGGER afterTxnItemsInsert
AFTER INSERT
ON txnitems FOR EACH ROW
BEGIN

declare txnTypeVar varchar(20);
declare siteIDFromVar int;

select txnType, siteIDFrom
into txnTypeVar, siteIDFromVar
from txn
where txnID = new.txnID;

IF txnTypeVar IN ('Store Order', 'Emergency') THEN
-- call the stored procedure from this trigger
-- are removing the item quantity now in this txn from the warehouse inventory
CALL removeInventoryFromWarehouse(new.quantity, new.itemID);

ELSEIF txnTypeVar = 'Online Order' then

-- call stored procedure from this trigger 
-- are removing the item quantity now in this txn (online order) from the store inventory
CALL removeInventoryFromStore(new.quantity, new.itemID, siteIDFromVar);

END IF;

END$$

DELIMITER ;

-- closing any active orders in the DB that are from before the 1st day of 2024
-- doing this because running into a potential issue where there may be active orders still open from
-- 2018 or 2019 for a particular site (ex. Saint John Retail - site 4)
-- which can prevent a store manager from creating a needed new order for their site
/* update txn
set status = 'Complete'
where shipDate <  '2024-01-01 00:00:00'
and status IN ('New', 'Submitted', 'Assembling', 'Assembled', 'In Transit', 'In progress', 'Delivered');
*/